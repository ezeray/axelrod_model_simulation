use std::fs;
use std::fs::File;
use std::io::prelude::*;
pub use rand::prelude::*;
pub use rand_pcg::Pcg64;

use axelrod_model_simulation as ax;

fn main() {
    // let seeds: [u64; 200] = [17093, 36562, 20889, 44060, 36378, 55386, 63513, 6699, 16097, 30514, 25163, 27837, 42125, 55577, 59320, 21324, 61220, 57763, 24572, 3258, 17716, 8222, 59069, 61777, 11677, 17176, 62738, 16063, 36766, 54807, 61076, 26670, 61762, 97, 3551, 33086, 32914, 64758, 25232, 26597, 45683, 13783, 50008, 6597, 7472, 9538, 24182, 52475, 58592, 45465, 19739, 12094, 52267, 57829, 36724, 27192, 41722, 14325, 59822, 33665, 35854, 54239, 39959, 41337, 13875, 23129, 45669, 41770, 49843, 53256, 44130, 34648, 13428, 34287, 22918, 50502, 3379, 2845, 11100, 45190, 11463, 26014, 10786, 48470, 14852, 32996, 51181, 57481, 56361, 44070, 1290, 33012, 37210, 45781, 37320, 6228, 26848, 13693, 53179, 19901, 13205, 60437, 33933, 34677, 24856, 59255, 23613, 49835, 5999, 59653, 3045, 30808, 60502, 19174, 18114, 3369, 31911, 12246, 60949, 5703, 64975, 14225, 12387, 46597, 10320, 6065, 30005, 22061, 25933, 28261, 19328, 21017, 16244, 54661, 9469, 894, 60765, 17392, 14931, 33102, 3029, 59344, 4103, 45520, 5732, 12611, 42760, 35212, 31301, 55768, 48363, 25231, 8581, 56658, 31702, 7696, 52334, 36042, 7793, 771, 17900, 20652, 62298, 12763, 32493, 6520, 42201, 47155, 59706, 46996, 27107, 7596, 33468, 15436, 17386, 53160, 24849, 28401, 44390, 40411, 55794, 22001, 63075, 60741, 13003, 10506, 6910, 37544, 1541, 39605, 17056, 60773, 5027, 15807, 60772, 40683, 49042, 2843, 8729, 64037];
    // let dif_sizes: [u32; 2] = [10, 20];
    // let dif_features: [u32; 3] = [5, 10, 15];
    // let dif_traits: [u32; 3] = [5, 10, 15];

    let seeds: [u64; 1000] = [54279,15552,23460,56525,61826,63773,18721,64585,29814,62192,31987,40189,19285,57607,19046,24380,5936,53128,246,15628,8673,44645,27538,3438,1622,10197,51709,55274,16800,42641,44672,37493,38918,54742,27472,58065,1949,60104,62033,3570,3054,41712,30204,32782,5121,13065,33947,668,26610,57969,59424,36759,31244,35926,3315,65346,41215,16085,46026,52178,48752,40675,58427,45253,43802,41046,11980,9951,64862,35290,32574,6432,53051,26244,6253,22305,30920,23665,5072,11960,44433,7160,59337,51876,18820,56797,2013,33873,26411,61679,4726,30970,35535,53313,45620,38764,61315,58901,40144,61434,5728,38680,19323,22425,19166,8006,52782,4373,6219,52015,45254,61209,23033,56497,44231,33479,37109,22028,17616,44874,55775,22937,41664,28996,53433,24718,49500,19951,19125,56449,49589,30501,38858,59534,64621,35887,27101,10482,52263,43641,60939,32394,27370,1531,61419,28473,15238,5625,28965,41391,56958,31957,31848,51870,36184,20872,64457,50821,10115,30479,17326,1090,61298,5247,4631,55445,20388,1696,55239,6752,52843,6190,1352,18909,40516,61717,63947,21399,18464,57577,42669,1188,18886,63449,58421,14070,48173,7735,36723,45527,29566,8602,7520,34840,3900,10752,65018,54266,14071,6433,36740,2203,16963,54753,5583,28091,4430,17149,50364,30110,15443,36813,54886,8365,37998,376,34869,42509,54722,54608,49847,24892,42190,62187,50175,23539,18739,14814,58847,47484,41527,1141,39189,38656,46477,45237,43581,42587,65502,5439,51609,13069,51464,43089,46118,47012,45699,28089,13399,11478,30127,18215,14745,45282,51940,48599,54821,38045,59215,53967,22065,29414,32397,7968,44201,12449,21405,51560,53502,8282,29825,5622,2518,64002,31265,18020,52766,54640,59773,55911,28776,40591,12504,17207,4352,5836,2972,20991,55067,21727,37864,52503,56036,56529,11538,42120,17848,40259,34456,61964,29509,23998,25891,23776,1594,48283,43716,52775,17230,4235,60257,42168,11574,37353,41497,35227,16245,47173,65190,60516,62333,58232,64414,225,12026,1515,17506,5351,47961,14962,8970,45325,19151,62425,15023,52993,44608,19331,20375,10583,64117,44467,294,32410,60646,7108,65079,537,7594,2367,51787,11505,64976,40763,37911,33400,35797,302,36665,43940,48469,58032,55225,49640,56610,21038,53681,42406,39609,13942,18418,65284,10901,36474,22325,28476,53537,22080,11180,51167,1974,54405,35324,27113,14973,4773,36422,22326,410,48034,59611,44764,46872,64946,8130,45970,62908,25500,15806,56320,22650,29905,33483,42965,23570,8340,41519,40806,22062,10801,39195,46744,22578,63483,207,34094,35684,36375,33010,3347,42126,48208,19575,8126,8282,43048,58676,45712,25267,15919,63837,20890,25895,28210,39358,37542,34866,22543,48846,63013,17982,28831,61817,57962,45549,64699,19985,61841,18854,5661,17860,37455,1322,54346,38051,11256,32169,61879,16285,39329,12874,60335,12674,15535,43773,41696,3736,64363,22242,34928,54621,3586,43174,55699,53630,59784,19778,44292,30806,58327,14134,16595,55486,40418,14427,22039,62386,23397,33606,52955,21299,15869,18934,12661,5242,65150,26480,6790,12834,32797,15930,56330,28996,34982,45813,44053,61364,3086,25344,50408,62182,6704,48273,64401,63209,48151,8411,29253,34111,29876,23953,5456,17553,25892,56178,35255,8617,30566,17639,6541,54597,46970,14383,48721,26449,7363,12936,27437,9735,34683,34914,54683,55314,39535,9413,34615,54748,41342,32934,27527,63698,62511,45222,30842,47682,11563,7540,22452,6899,11814,56687,60196,56236,54994,41992,50396,56777,27207,4704,10325,18521,64550,63423,35596,19562,2457,13953,5056,38974,24266,3920,27319,15178,46442,33077,53179,30407,38617,55004,25781,64959,38546,6004,4589,24834,26087,31440,42806,40543,41151,8955,21952,14058,42331,19360,31224,22210,25444,56667,42478,821,13017,6404,36923,35868,60218,29836,20334,3153,39446,42447,46717,29239,49562,34935,52513,21269,6440,26584,52574,26008,36637,25980,12349,35585,46283,30171,60940,9448,61581,21512,24367,23761,55284,30970,26078,18399,5074,52006,51656,1800,55971,38917,34474,17072,64270,40410,6086,10292,32858,27408,19408,18860,58761,27803,59412,38243,44412,10094,18515,36004,25660,5863,22470,15462,20836,46184,27998,7743,20481,15816,30384,48023,21580,42821,4738,59537,6575,64221,50709,385,15263,36534,1283,59595,53510,48489,9037,56744,9969,7170,33859,43622,39964,16985,30660,32476,21078,22474,10980,51031,4732,6009,33351,11420,6315,5288,63862,59260,48443,54983,37088,65177,29005,25781,33737,26106,29377,61525,947,45663,45347,20701,50260,2950,25351,57626,39401,42245,51283,7713,57467,8914,61000,47082,20875,14756,29101,34555,9667,53440,9734,5131,43609,34098,24868,51778,33128,40598,40606,63738,46648,32978,34170,49980,60476,7217,7987,46071,54844,42974,2133,4981,49138,16412,39081,38318,21527,8439,5161,16190,27948,5428,46550,30370,22975,45256,24979,24700,62882,57252,18426,18287,27054,3891,65489,35824,24573,7928,14651,37846,37581,45297,52659,11619,15584,32447,13766,32589,19221,32259,25166,31832,23468,34780,47987,41135,538,63264,35920,39484,5388,25218,15608,2464,5160,16109,63373,33444,9645,59526,40336,58750,24742,27871,18080,13440,55118,63793,14102,12708,29967,52192,32128,3243,11778,26515,36376,59417,52147,31407,40193,56689,46155,31556,28656,55711,8069,26911,31529,46181,35076,46952,26465,60541,49592,65122,6619,16056,20724,8827,5356,32620,60661,61458,53769,36554,36226,15548,54536,46688,40918,13251,56962,10227,6346,62685,56719,43275,47076,32655,10387,53495,15096,46381,48283,36926,39964,4976,13715,40994,52821,61791,12684,37314,52263,48933,6659,50799,16514,58325,17965,45088,5721,22267,21548,43320,28894,53954,64421,37334,12061,5028,45595,45197,22993,27272,63516,18713,35517,3479,56448,62885,24954,8164,51032,46669,5238,1539,44906,18792,33463,10723,53540,2320,45424,30510,64178,11647,40185,16059,17798,45104,29806,55644,17719,12087,32179,64697,2777,58686,28068,4196,25623,30497,60661,22873,46274,36995,24459,18745,3972,63916,15348,37806,12400,56272,6274,43760,2264,52591,64333,8023,20473,32796,3461,53757,8015,37809,47964,6061,3634,44819,31323,13176,53638,43577,57799,18692,42017];
    let dif_sizes: [u32; 4] = [10, 20, 30, 40];
    let dif_features: [u32; 5] = [5, 10, 15, 20, 25];
    let dif_traits: [u32; 5] = [5, 10, 15, 20, 25];

    let num_sim_per_combination = 10;

    fs::create_dir("./simulation_output_json").unwrap();
    fs::create_dir("./simulation_results_csv").unwrap();

    let mut seed = seeds.iter();
    let mut num_cluters_output = File::create("./simulation_results_csv/results_number_of_clusters_per_combination.csv").unwrap();
    writeln!(num_cluters_output, "Size,Features,Traits,Avg Num of Clusters").unwrap();

    let mut porportion_output = File::create("./simulation_results_csv/number_proportion_in_largest_cluster.csv").unwrap();
    writeln!(porportion_output, "Size,Features,Traits,Proportion").unwrap();


    for s in dif_sizes.iter() {
        for f in dif_features.iter() {
            for t in dif_traits.iter() {
                let mut totals: f32 = 0.;

                for c in 0..num_sim_per_combination {
                    // let my_seed = *seed.next().unwrap();
                    // println!("seed: {}", my_seed);
                    let mut config = ax::SimulationConfig::new(
                        *f, *t, *s, *s, 1_000_000, Pcg64::seed_from_u64(*seed.next().unwrap())
                    );

                    // totals += ax::run_simulation_and_count(&mut config) as f32;
                    // let sim = ax::run_simulation(&mut config);
                    let mut sim = ax::Territory::run_simulation(&mut config);
                    let num_cultures = sim.run_count_cultures(&config);
                    totals += num_cultures.len() as f32;

                    writeln!(porportion_output, "{},{},{},{}", s, f, t, ax::Territory::calc_prop_pop_in_largest_cluster(&config, &num_cultures)).unwrap();
                    
                    let culture_labels_map = sim.run_assign_label_to_cultures(&config);
                    sim.run_assign_label_to_individuals(&config, culture_labels_map);

                    if c == num_sim_per_combination - 1 {
                        let title = format!("./simulation_output_json/simulation_terrain_features-{}_traits-{}_size-{}.json", *f, *t, *s);
                        let file = File::create(title).unwrap();
                        serde_json::to_writer(&file, &sim).unwrap();
                    }
                }

                let avg: f32 = totals / num_sim_per_combination as f32;
                writeln!(num_cluters_output, "{},{},{},{}", s, f, t, avg).unwrap();
            }
        }
    }
}